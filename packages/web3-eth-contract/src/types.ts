import { EthExecutionAPI, PromiEvent, ReceiptInfo } from 'web3-common';
import { SupportedProviders } from 'web3-core';
import { ContractAbi } from 'web3-eth-abi';
import { Address, BlockNumberOrTag, Bytes, Filter, HexString, Numbers, Uint } from 'web3-utils';

export interface EventLog {
	event: string;
	address: string;
	returnValues: unknown;
	logIndex: number;
	transactionIndex: number;
	transactionHash: string;
	blockHash: string;
	blockNumber: number;
	raw?: { data: string; topics: unknown[] };
}

export interface ContractEventOptions {
	filter?: Filter;
	fromBlock?: BlockNumberOrTag;
	topics?: string[];
}

export interface ContractOptions {
	readonly gas: Uint | null;
	readonly gasPrice: Uint | null;
	readonly gasLimit?: Uint;
	readonly from?: Address;
	readonly data?: Bytes;
	jsonInterface: ContractAbi;
	address?: Address; // All transactions generated by web3.js from this contract will contain this address as the "to".
}

export interface ContractInitOptions {
	readonly gas?: Uint | null;
	readonly gasPrice?: Uint | null;
	readonly from?: Address;
	readonly data?: Bytes;
	readonly gasLimit?: Uint;
	readonly provider: SupportedProviders<EthExecutionAPI> | string;
}

export type TransactionReceipt = ReceiptInfo;

export interface NonPayableCallOptions {
	nonce?: Numbers;
	chainId?: Numbers;
	from?: Address;
	to?: Address;
	data?: HexString;
	gas?: string;
	maxPriorityFeePerGas?: Numbers;
	maxFeePerGas?: Numbers;
	gasPrice?: string;
}

export interface PayableCallOptions extends NonPayableCallOptions {
	value?: string;
}

export interface NonPayableMethodObject<Inputs = unknown[], Outputs = unknown[]> {
	arguments: Inputs;
	call(tx?: NonPayableCallOptions, block?: BlockNumberOrTag): Promise<Outputs>;
	send(tx?: NonPayableCallOptions): PromiEvent<
		TransactionReceipt,
		{
			sending: object;
			sent: object;
			transactionHash: string;
			receipt: TransactionReceipt;
			confirmation: {
				confirmations: number;
				receipt: TransactionReceipt;
				latestBlockHash: HexString;
			};
			error: Error;
		}
	>;
	estimateGas(tx?: NonPayableCallOptions): Promise<number>;
	encodeABI(): string;
}

export interface PayableMethodObject<Inputs = unknown[], Outputs = unknown[]> {
	arguments: Inputs;
	call(tx?: PayableCallOptions, block?: BlockNumberOrTag): Promise<Outputs>;
	send(tx?: PayableCallOptions): PromiEvent<
		TransactionReceipt,
		{
			sending: object;
			sent: object;
			transactionHash: string;
			receipt: TransactionReceipt;
			confirmation: {
				confirmations: number;
				receipt: TransactionReceipt;
				latestBlockHash: HexString;
			};
			error: Error;
		}
	>;
	estimateGas(tx?: PayableCallOptions): Promise<number>;
	encodeABI(): HexString;
}
